name: CI/CD Pipeline with DVC and AWS

# Trigger the workflow on push or pull request events
on:
  push:
    branches:
      - main  # Replace with your default branch
  pull_request:
    branches:
      - main

# Jobs to run
jobs:
  ci:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Set up Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"  # Replace with your desired Python version

      # Step 3: Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov flake8 mypy dvc

      # Step 4: Configure AWS credentials for DVC
      - name: Configure AWS credentials for DVC
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      # Step 5: Pull data and models with DVC
      - name: Pull data and models with DVC
        run: |
          dvc pull

      # Step 6: Run linter (flake8)
      - name: Run linter
        run: flake8 my_package/  # Replace with your package directory

      # Step 7: Run type checker (mypy)
      - name: Run type checker
        run: mypy my_package/  # Replace with your package directory

      # Step 8: Run tests with coverage
      - name: Run tests
        run: pytest --cov=my_package tests/  # Replace with your package and test directory

      # Step 9: Push updated data and models to DVC remote storage (if needed)
      - name: Push data and models to DVC remote storage
        if: github.ref == 'refs/heads/main'  # Only push on the main branch
        run: |
          dvc add data/raw/dataset.csv  # Add new or updated data files
          dvc add models/model.pkl      # Add new or updated models
          dvc push

  cd:
    runs-on: ubuntu-latest
    needs: ci  # Ensure the CI job runs first
    if: github.ref == 'refs/heads/main'  # Only run on the main branch

    steps:
      # Step 1: Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Set up Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      # Step 3: Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Step 4: Configure AWS credentials
      - name: Configure AWS credentials
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      # Step 5: Log in to AWS ECR
      - name: Log in to AWS ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # Step 6: Build Docker image
      - name: Build Docker image
        run: |
          docker build -t my_app:latest .

      # Step 7: Tag Docker image
      - name: Tag Docker image
        run: |
          docker tag my_app:latest ${{ steps.login-ecr.outputs.registry }}/my_app:latest

      # Step 8: Push Docker image to AWS ECR
      - name: Push Docker image to AWS ECR
        run: |
          docker push ${{ steps.login-ecr.outputs.registry }}/my_app:latest

      # Step 9: Deploy to AWS ECS (optional)
      - name: Deploy to AWS ECS
        run: |
          aws ecs update-service \
            --cluster my-cluster \
            --service my-service \
            --force-new-deployment